{"version":3,"sources":["../src/index.ts","../src/RosettanetWallet/rosettanetConnect.ts","../src/RosettanetWallet/rosettanetAccount.ts"],"sourcesContent":["export * as rosettanetWallet from './RosettanetWallet/rosettanetConnect';\nexport * from './RosettanetWallet';\n","import {\n  TypedData,\n  WatchAssetParameters,\n  RequestFn,\n  WalletEventListener,\n  Permission,\n  ChainId,\n} from '@starknet-io/types-js';\nimport { BLOCK_HASH, BLOCK_NUMBER, BLOCK_TAG, TX_REQUEST, TXN_HASH } from '../types/index';\n\ninterface Request extends RequestFn {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (request: { method: string; params?: Array<unknown> }): Promise<any>;\n}\n\nexport interface EthereumWindowObject {\n  request: Request;\n  on: WalletEventListener;\n  off: WalletEventListener;\n  id: string;\n  name: string;\n  icon: string;\n  version: '1.0.0';\n}\n\nexport function requestAccounts(ewo: EthereumWindowObject): Promise<string[]> {\n  return ewo.request({ method: 'eth_requestAccounts' });\n}\n\nexport function watchAsset(\n  ewo: EthereumWindowObject,\n  asset: WatchAssetParameters\n): Promise<boolean> {\n  return ewo.request({ method: 'wallet_watchAsset', params: [asset] });\n}\n\nexport function requestChainId(ewo: EthereumWindowObject): Promise<string> {\n  return ewo.request({ method: 'eth_chainId' });\n}\n\nexport function sendTransaction(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\n  return ewo.request({ method: 'eth_sendTransaction', params: [tx] });\n}\n\nexport function switchRosettanetChain(\n  ewo: EthereumWindowObject,\n  chainId: ChainId\n): Promise<string> {\n  return ewo.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId }],\n  });\n}\n\nexport function getPermissions(ewo: EthereumWindowObject): Promise<Permission[]> {\n  return ewo.request({ method: 'wallet_getPermissions' });\n}\n\nexport function personalSign(\n  ewo: EthereumWindowObject,\n  message: string,\n  address: string\n): Promise<string> {\n  return ewo.request({ method: 'personal_sign', params: [message, address] });\n}\n\nexport function accounts(ewo: EthereumWindowObject): Promise<string[]> {\n  return ewo.request({ method: 'eth_accounts' });\n}\n\nexport function clientVersion(ewo: EthereumWindowObject): Promise<string> {\n  return ewo.request({ method: 'web3_clientVersion' });\n}\n\nexport function getBlockNumber(ewo: EthereumWindowObject): Promise<string> {\n  return ewo.request({ method: 'eth_blockNumber' });\n}\n\nexport function call(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\n  return ewo.request({ method: 'eth_call', params: [tx] });\n}\n\nexport function estimateGas(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\n  return ewo.request({ method: 'eth_estimateGas', params: [tx] });\n}\n\nexport function gasPrice(ewo: EthereumWindowObject): Promise<string> {\n  return ewo.request({ method: 'eth_gasPrice' });\n}\n\nexport function getBalance(\n  ewo: EthereumWindowObject,\n  address: string,\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n): Promise<string> {\n  return ewo.request({ method: 'eth_getBalance', params: [address, block] });\n}\n\nexport function getBlockByHash(\n  ewo: EthereumWindowObject,\n  blockHash: BLOCK_HASH,\n  hydratedTx: boolean = false\n): Promise<string> {\n  return ewo.request({ method: 'eth_getBlockByHash', params: [blockHash, hydratedTx] });\n}\n\nexport function getBlockByNumber(\n  ewo: EthereumWindowObject,\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG,\n  hydratedTx: boolean = false\n): Promise<string> {\n  return ewo.request({ method: 'eth_getBlockByNumber', params: [blockNumber, hydratedTx] });\n}\n\nexport function getBlockTransactionCountByHash(\n  ewo: EthereumWindowObject,\n  blockHash: BLOCK_HASH\n): Promise<string> {\n  return ewo.request({ method: 'eth_getBlockTransactionCountByHash', params: [blockHash] });\n}\n\nexport function getBlockTransactionCountByNumber(\n  ewo: EthereumWindowObject,\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG\n): Promise<string> {\n  return ewo.request({ method: 'eth_getBlockTransactionCountByNumber', params: [blockNumber] });\n}\n\nexport function getCode(\n  ewo: EthereumWindowObject,\n  address: string,\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n): Promise<string> {\n  return ewo.request({ method: 'eth_getCode', params: [address, block] });\n}\n\nexport function getTransactionHashByBlockHashAndIndex(\n  ewo: EthereumWindowObject,\n  blockHash: BLOCK_HASH,\n  index: string\n): Promise<string> {\n  return ewo.request({\n    method: 'eth_getTransactionByBlockHashAndIndex',\n    params: [blockHash, index],\n  });\n}\n\nexport function getTransactionHashByBlockNumberAndIndex(\n  ewo: EthereumWindowObject,\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG,\n  index: string\n): Promise<string> {\n  return ewo.request({\n    method: 'eth_getTransactionByBlockNumberAndIndex',\n    params: [blockNumber, index],\n  });\n}\n\nexport function getTransactionByHash(ewo: EthereumWindowObject, txHash: TXN_HASH): Promise<string> {\n  return ewo.request({ method: 'eth_getTransactionByHash', params: [txHash] });\n}\n\nexport function getTransactionCount(\n  ewo: EthereumWindowObject,\n  address: string,\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n): Promise<string> {\n  return ewo.request({ method: 'eth_getTransactionCount', params: [address, block] });\n}\n\nexport function getTransactionReceipt(\n  ewo: EthereumWindowObject,\n  txHash: TXN_HASH\n): Promise<string> {\n  return ewo.request({ method: 'eth_getTransactionReceipt', params: [txHash] });\n}\n\nexport function syncing(ewo: EthereumWindowObject): Promise<string> {\n  return ewo.request({ method: 'eth_syncing' });\n}\n\n/**\n * Sign typed data using the wallet.\n * @param ewo wallet window object to request the signature.\n * @param message The typed data to sign.\n * @param address The wallet address to sign.\n * @returns Signatures as strings.\n */\nexport function signMessage(\n  ewo: EthereumWindowObject,\n  message: TypedData,\n  address: string\n): Promise<string> {\n  return ewo.request({ method: 'eth_signTypedData_v4', params: [address, message] });\n}\n","import { WatchAssetParameters, TypedData } from '@starknet-io/types-js';\nimport { prepareMulticallCalldata } from 'rosettanet';\nimport {\n  EthereumWindowObject,\n  requestAccounts,\n  watchAsset,\n  sendTransaction,\n  signMessage,\n  requestChainId,\n  switchRosettanetChain,\n  getPermissions,\n  personalSign,\n  accounts,\n  getBlockNumber,\n  call,\n  estimateGas,\n  gasPrice,\n  getBalance,\n  getBlockByHash,\n  getBlockByNumber,\n  getBlockTransactionCountByHash,\n  getBlockTransactionCountByNumber,\n  getCode,\n  getTransactionHashByBlockHashAndIndex,\n  getTransactionHashByBlockNumberAndIndex,\n  getTransactionByHash,\n  getTransactionCount,\n  getTransactionReceipt,\n} from './rosettanetConnect';\nimport {\n  CairoVersion,\n  ProviderOptions,\n  Call,\n  Uint256,\n  ArraySignatureType,\n  cairo,\n  encode,\n  num,\n  ProviderInterface,\n  Account,\n  AccountInterface,\n  hash,\n  Calldata,\n  RawArgs\n} from 'starknet';\nimport { BLOCK_HASH, BLOCK_NUMBER, BLOCK_TAG, TX_REQUEST, TXN_HASH } from '../types/index';\nimport { RosettanetChainId } from './constants';\n\nexport class RosettanetAccount extends Account implements AccountInterface {\n  public walletProvider: EthereumWindowObject;\n\n  constructor(\n    providerOrOptions: ProviderOptions | ProviderInterface,\n    walletProvider: EthereumWindowObject,\n    cairoVersion?: CairoVersion,\n    address: string = ''\n  ) {\n    super(providerOrOptions, address, '', cairoVersion); // At this point unknown address\n    this.walletProvider = walletProvider;\n\n    if (!address.length) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '@deprecated Use static method WalletAccount.connect or WalletAccount.connectSilent instead. Constructor {@link WalletAccount.(format:2)}.'\n      );\n      requestAccounts(this.walletProvider).then(([accountAddress]) => {\n        this.address = accountAddress.toLowerCase();\n      });\n    }\n  }\n\n  /**\n   * Send transaction to the wallet.\n   * @param params Ethereum transaction object.\n   * @returns Transaction hash.\n   */\n  public sendTransactionRosettanet(params: TX_REQUEST) {\n    return sendTransaction(this.walletProvider, params);\n  }\n\n  /**\n   * Request the current chain ID from the wallet.\n   * @returns The current Wallet Chain ID.\n   */\n  public chainIdRosettanet() {\n    return requestChainId(this.walletProvider);\n  }\n\n  /**\n   * Sign typed data using the wallet. Uses personal_sign method.\n   * @param message The typed data to sign.\n   * @param address The wallet address to sign.\n   * @returns Signatures as strings.\n   */\n  public personalSignRosettanet(message: string, address: string) {\n    return personalSign(this.walletProvider, message, address);\n  }\n\n  /**\n   * Request connected accounts\n   * @returns connected accounts addresses\n   */\n  public accountsRosettanet() {\n    return accounts(this.walletProvider);\n  }\n\n  /**\n   * Request latest block number in Starknet\n   * @returns latest block number in hexadecimal format\n   */\n  public blockNumberRosettanet() {\n    return getBlockNumber(this.walletProvider);\n  }\n\n  /**\n   * Call request.\n   * @param tx Ethereum transaction object.\n   * @returns Answer from called contract.\n   */\n  public callRosettanet(tx: TX_REQUEST) {\n    return call(this.walletProvider, tx);\n  }\n\n  /**\n   * Estimated gas fee for the transaction.\n   * @param tx Ethereum transaction object.\n   * @returns Estimated gas amount.\n   */\n  public estimateGasRosettanet(tx: TX_REQUEST) {\n    return estimateGas(this.walletProvider, tx);\n  }\n\n  /**\n   * Latest gas price in network.\n   * @returns Latest gas price.\n   */\n  public gasPriceRosettanet() {\n    return gasPrice(this.walletProvider);\n  }\n\n  /**\n   * STRK balance of given address.\n   * @param address Address to check balance.\n   * @param block Block number or hash. (optional)\n   * @returns STRK balance.\n   */\n  public getBalanceRosettanet(\n    address: string,\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n  ) {\n    return getBalance(this.walletProvider, address, block);\n  }\n\n  /**\n   * Block by given block hash.\n   * @param blockHash Block hash.\n   * @param hydratedTx Hydrated transactions (optional)\n   * @returns Block by given block hash.\n   */\n  public getBlockByHashRosettanet(blockHash: BLOCK_HASH, hydratedTx: boolean = false) {\n    return getBlockByHash(this.walletProvider, blockHash, hydratedTx);\n  }\n\n  /**\n   * Block by given block number.\n   * @param blockNumber Block number or block tag.\n   * @param hydratedTx Hydrated transactions (optional)\n   * @returns Block by given block number.\n   */\n  public getBlockByNumberRosettanet(\n    blockNumber: BLOCK_NUMBER | BLOCK_TAG,\n    hydratedTx: boolean = false\n  ) {\n    return getBlockByNumber(this.walletProvider, blockNumber, hydratedTx);\n  }\n\n  /**\n   * Transaction count of given block hash.\n   * @param blockHash Block hash.\n   * @returns Transaction count of given block hash.\n   */\n  public getBlockTransactionCountByHashRosettanet(blockHash: BLOCK_HASH) {\n    return getBlockTransactionCountByHash(this.walletProvider, blockHash);\n  }\n\n  /**\n   * Transaction count of given block number.\n   * @param blockNumber Block number or block tag..\n   * @returns Transaction count of given block number.\n   */\n  public getBlockTransactionCountByNumberRosettanet(blockNumber: BLOCK_NUMBER | BLOCK_TAG) {\n    return getBlockTransactionCountByNumber(this.walletProvider, blockNumber);\n  }\n\n  public getCodeRosettanet(\n    address: string,\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n  ) {\n    return getCode(this.walletProvider, address, block);\n  }\n\n  public getTransactionHashByBlockHashAndIndexRosettanet(blockHash: BLOCK_HASH, index: string) {\n    return getTransactionHashByBlockHashAndIndex(this.walletProvider, blockHash, index);\n  }\n\n  public getTransactionHashByBlockNumberAndIndexRosettanet(\n    blockNumber: BLOCK_NUMBER | BLOCK_TAG,\n    index: string\n  ) {\n    return getTransactionHashByBlockNumberAndIndex(this.walletProvider, blockNumber, index);\n  }\n\n  public getTransactionByHashRosettanet(txHash: TXN_HASH) {\n    return getTransactionByHash(this.walletProvider, txHash);\n  }\n\n  /**\n   * Transaction count of given address.\n   * @param address address.\n   * @returns Transaction count of given address.\n   */\n  public getTransactionCountRosettanet(\n    address: string,\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\n  ) {\n    return getTransactionCount(this.walletProvider, address, block);\n  }\n\n  /**\n   * Transaction receipt of given transaction hash.\n   * @param txHash address.\n   * @returns Transaction receipt of given transaction hash.\n   */\n  public getTransactionReceiptRosettanet(txHash: TXN_HASH) {\n    return getTransactionReceipt(this.walletProvider, txHash);\n  }\n\n  // WALLET ACCOUNT METHODS\n\n  public requestAccounts() {\n    return requestAccounts(this.walletProvider);\n  }\n\n  /**\n   * Request Permission for wallet account\n   * @returns allowed accounts addresses\n   */\n  public getPermissions() {\n    if (this.walletProvider.name === 'Coinbase Wallet') {\n      throw new Error('Get permissions Method not found in Coinbase Wallet');\n    }\n    return getPermissions(this.walletProvider);\n  }\n\n  public switchStarknetChain(chainId: RosettanetChainId) {\n    return switchRosettanetChain(this.walletProvider, chainId);\n  }\n\n  /**\n   * Request adding ERC20 Token to Wallet List\n   * @param asset WatchAssetParameters\n   * @returns boolean\n   */\n  public watchAsset(asset: WatchAssetParameters) {\n    return watchAsset(this.walletProvider, asset);\n  }\n\n  override declare(): Promise<{ transaction_hash: string; class_hash: string }> {\n    throw new Error('Declare Method not implemented in Rosettanet Account Class.');\n  }\n\n  override deploy(): Promise<{ transaction_hash: string; contract_address: string[] }> {\n    throw new Error('Deploy Method not implemented in Rosettanet Account Class.');\n  }\n\n  /**\n   * Sign typed data using the wallet. Uses eth_signTypedData_v4 method.\n   * @param message The typed data to sign.\n   * @returns Signature as strings.\n   */\n  override async signMessage(message: TypedData) {\n    const evmSignedHash = await signMessage(this.walletProvider, message, this.address);\n\n    if (!evmSignedHash || (evmSignedHash.length !== 132 && evmSignedHash.length !== 130)) {\n      throw new Error('Ethereum Signature error');\n    }\n\n    const signedHashWithoutPrefix = encode.removeHexPrefix(evmSignedHash);\n    const r: Uint256 = cairo.uint256(encode.addHexPrefix(signedHashWithoutPrefix.slice(0, 63))); // First 64 chars → r (32 bytes)\n    const s: Uint256 = cairo.uint256(encode.addHexPrefix(signedHashWithoutPrefix.slice(64, 127))); // Next 64 chars → s (32 bytes)\n    const v = encode.addHexPrefix(signedHashWithoutPrefix.slice(128, 130)); // Last 2 chars → v (1 byte)\n\n    if (v !== '0x1c' && v !== '0x1b') {\n      throw new Error('Invalid Ethereum Signature');\n    }\n\n    return [\n      num.toHex(r.low),\n      num.toHex(r.high),\n      num.toHex(s.low),\n      num.toHex(s.high),\n      num.toHex(v),\n    ] as ArraySignatureType;\n  }\n\n  override async execute(calls: Call[]): Promise<{ transaction_hash: string }> {\n    if (Array.isArray(calls) === false) {\n      throw new Error('Invalid calls parameter. Expected an array of calls.');\n    }\n    const arrayCalls: [string, string, Calldata | RawArgs | undefined][] = calls.map((item) => [item.contractAddress, item.entrypoint, item.calldata]);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const txCalls = [].concat(arrayCalls as any).map((it) => {\n      const entryPointValue = it[1] as string;\n      const entryPoint = entryPointValue.startsWith(\"0x\") ? entryPointValue : hash.getSelectorFromName(entryPointValue);\n\n      return {\n        contract_address: it[0],\n        entry_point: entryPoint,\n        calldata: it[2],\n      };\n    });\n\n    const params = {\n      calls: txCalls,\n    };\n\n    const txData = prepareMulticallCalldata(params.calls);\n\n    const txObject = {\n      from: this.address,\n      to: '0x0000000000000000000000004645415455524553',\n      data: txData,\n      value: '0x0',\n    };\n\n    const txHash = await sendTransaction(this.walletProvider, txObject);\n    return { transaction_hash: txHash };\n  }\n\n  static async connect(\n    provider: ProviderInterface,\n    walletProvider: EthereumWindowObject,\n    cairoVersion?: CairoVersion\n  ) {\n    const [accountAddress] = await requestAccounts(walletProvider);\n    return new RosettanetAccount(provider, walletProvider, cairoVersion, accountAddress);\n  }\n\n  static async connectSilent(\n    provider: ProviderInterface,\n    walletProvider: EthereumWindowObject,\n    cairoVersion?: CairoVersion\n  ) {\n    const [accountAddress] = await requestAccounts(walletProvider);\n    return new RosettanetAccount(provider, walletProvider, cairoVersion, accountAddress);\n  }\n}\n"],"mappings":"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","names":[]}