{"version":3,"sources":["../src/index.ts","../src/RosettanetWallet/rosettanetConnect.ts","../src/RosettanetWallet/rosettanetAccount.ts"],"sourcesContent":["export * as rosettanetWallet from './RosettanetWallet/rosettanetConnect';\r\nexport * from './RosettanetWallet';\r\n","import {\r\n  TypedData,\r\n  WatchAssetParameters,\r\n  RequestFn,\r\n  WalletEventListener,\r\n  Permission,\r\n  ChainId,\r\n} from '@starknet-io/types-js';\r\nimport { BLOCK_HASH, BLOCK_NUMBER, BLOCK_TAG, TX_REQUEST, TXN_HASH } from '../types/index';\r\n\r\ninterface Request extends RequestFn {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  (request: { method: string; params?: Array<unknown> }): Promise<any>;\r\n}\r\n\r\nexport interface EthereumWindowObject {\r\n  request: Request;\r\n  on: WalletEventListener;\r\n  off: WalletEventListener;\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  version: '1.0.0';\r\n}\r\n\r\nexport function requestAccounts(ewo: EthereumWindowObject): Promise<string[]> {\r\n  return ewo.request({ method: 'eth_requestAccounts' });\r\n}\r\n\r\nexport function watchAsset(\r\n  ewo: EthereumWindowObject,\r\n  asset: WatchAssetParameters\r\n): Promise<boolean> {\r\n  return ewo.request({ method: 'wallet_watchAsset', params: [asset] });\r\n}\r\n\r\nexport function requestChainId(ewo: EthereumWindowObject): Promise<string> {\r\n  return ewo.request({ method: 'eth_chainId' });\r\n}\r\n\r\nexport function sendTransaction(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\r\n  return ewo.request({ method: 'eth_sendTransaction', params: [tx] });\r\n}\r\n\r\nexport function switchRosettanetChain(\r\n  ewo: EthereumWindowObject,\r\n  chainId: ChainId\r\n): Promise<string> {\r\n  return ewo.request({\r\n    method: 'wallet_switchEthereumChain',\r\n    params: [{ chainId }],\r\n  });\r\n}\r\n\r\nexport function getPermissions(ewo: EthereumWindowObject): Promise<Permission[]> {\r\n  return ewo.request({ method: 'wallet_getPermissions' });\r\n}\r\n\r\nexport function personalSign(\r\n  ewo: EthereumWindowObject,\r\n  message: string,\r\n  address: string\r\n): Promise<string> {\r\n  return ewo.request({ method: 'personal_sign', params: [message, address] });\r\n}\r\n\r\nexport function accounts(ewo: EthereumWindowObject): Promise<string[]> {\r\n  return ewo.request({ method: 'eth_accounts' });\r\n}\r\n\r\nexport function clientVersion(ewo: EthereumWindowObject): Promise<string> {\r\n  return ewo.request({ method: 'web3_clientVersion' });\r\n}\r\n\r\nexport function getBlockNumber(ewo: EthereumWindowObject): Promise<string> {\r\n  return ewo.request({ method: 'eth_blockNumber' });\r\n}\r\n\r\nexport function call(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\r\n  return ewo.request({ method: 'eth_call', params: [tx] });\r\n}\r\n\r\nexport function estimateGas(ewo: EthereumWindowObject, tx: TX_REQUEST): Promise<string> {\r\n  return ewo.request({ method: 'eth_estimateGas', params: [tx] });\r\n}\r\n\r\nexport function gasPrice(ewo: EthereumWindowObject): Promise<string> {\r\n  return ewo.request({ method: 'eth_gasPrice' });\r\n}\r\n\r\nexport function getBalance(\r\n  ewo: EthereumWindowObject,\r\n  address: string,\r\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getBalance', params: [address, block] });\r\n}\r\n\r\nexport function getBlockByHash(\r\n  ewo: EthereumWindowObject,\r\n  blockHash: BLOCK_HASH,\r\n  hydratedTx: boolean = false\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getBlockByHash', params: [blockHash, hydratedTx] });\r\n}\r\n\r\nexport function getBlockByNumber(\r\n  ewo: EthereumWindowObject,\r\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG,\r\n  hydratedTx: boolean = false\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getBlockByNumber', params: [blockNumber, hydratedTx] });\r\n}\r\n\r\nexport function getBlockTransactionCountByHash(\r\n  ewo: EthereumWindowObject,\r\n  blockHash: BLOCK_HASH\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getBlockTransactionCountByHash', params: [blockHash] });\r\n}\r\n\r\nexport function getBlockTransactionCountByNumber(\r\n  ewo: EthereumWindowObject,\r\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getBlockTransactionCountByNumber', params: [blockNumber] });\r\n}\r\n\r\nexport function getCode(\r\n  ewo: EthereumWindowObject,\r\n  address: string,\r\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getCode', params: [address, block] });\r\n}\r\n\r\nexport function getTransactionHashByBlockHashAndIndex(\r\n  ewo: EthereumWindowObject,\r\n  blockHash: BLOCK_HASH,\r\n  index: string\r\n): Promise<string> {\r\n  return ewo.request({\r\n    method: 'eth_getTransactionByBlockHashAndIndex',\r\n    params: [blockHash, index],\r\n  });\r\n}\r\n\r\nexport function getTransactionHashByBlockNumberAndIndex(\r\n  ewo: EthereumWindowObject,\r\n  blockNumber: BLOCK_NUMBER | BLOCK_TAG,\r\n  index: string\r\n): Promise<string> {\r\n  return ewo.request({\r\n    method: 'eth_getTransactionByBlockNumberAndIndex',\r\n    params: [blockNumber, index],\r\n  });\r\n}\r\n\r\nexport function getTransactionByHash(ewo: EthereumWindowObject, txHash: TXN_HASH): Promise<string> {\r\n  return ewo.request({ method: 'eth_getTransactionByHash', params: [txHash] });\r\n}\r\n\r\nexport function getTransactionCount(\r\n  ewo: EthereumWindowObject,\r\n  address: string,\r\n  block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getTransactionCount', params: [address, block] });\r\n}\r\n\r\nexport function getTransactionReceipt(\r\n  ewo: EthereumWindowObject,\r\n  txHash: TXN_HASH\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_getTransactionReceipt', params: [txHash] });\r\n}\r\n\r\nexport function syncing(ewo: EthereumWindowObject): Promise<string> {\r\n  return ewo.request({ method: 'eth_syncing' });\r\n}\r\n\r\n/**\r\n * Sign typed data using the wallet.\r\n * @param ewo wallet window object to request the signature.\r\n * @param message The typed data to sign.\r\n * @param address The wallet address to sign.\r\n * @returns Signatures as strings.\r\n */\r\nexport function signMessage(\r\n  ewo: EthereumWindowObject,\r\n  message: TypedData,\r\n  address: string\r\n): Promise<string> {\r\n  return ewo.request({ method: 'eth_signTypedData_v4', params: [address, message] });\r\n}\r\n","import { WatchAssetParameters, TypedData } from '@starknet-io/types-js';\r\nimport { prepareMulticallCalldata } from 'rosettanet';\r\nimport {\r\n  EthereumWindowObject,\r\n  requestAccounts,\r\n  watchAsset,\r\n  sendTransaction,\r\n  signMessage,\r\n  requestChainId,\r\n  switchRosettanetChain,\r\n  getPermissions,\r\n  personalSign,\r\n  accounts,\r\n  getBlockNumber,\r\n  call,\r\n  estimateGas,\r\n  gasPrice,\r\n  getBalance,\r\n  getBlockByHash,\r\n  getBlockByNumber,\r\n  getBlockTransactionCountByHash,\r\n  getBlockTransactionCountByNumber,\r\n  getCode,\r\n  getTransactionHashByBlockHashAndIndex,\r\n  getTransactionHashByBlockNumberAndIndex,\r\n  getTransactionByHash,\r\n  getTransactionCount,\r\n  getTransactionReceipt,\r\n} from './rosettanetConnect';\r\nimport {\r\n  CairoVersion,\r\n  ProviderOptions,\r\n  AllowArray,\r\n  Call,\r\n  Uint256,\r\n  ArraySignatureType,\r\n  cairo,\r\n  encode,\r\n  num,\r\n  ProviderInterface,\r\n  Account,\r\n  AccountInterface,\r\n} from 'starknet';\r\nimport { BLOCK_HASH, BLOCK_NUMBER, BLOCK_TAG, TX_REQUEST, TXN_HASH } from '../types/index';\r\nimport { RosettanetChainId } from './constants';\r\n\r\nexport class RosettanetAccount extends Account implements AccountInterface {\r\n  public walletProvider: EthereumWindowObject;\r\n\r\n  constructor(\r\n    providerOrOptions: ProviderOptions | ProviderInterface,\r\n    walletProvider: EthereumWindowObject,\r\n    cairoVersion?: CairoVersion,\r\n    address: string = ''\r\n  ) {\r\n    super(providerOrOptions, address, '', cairoVersion); // At this point unknown address\r\n    this.walletProvider = walletProvider;\r\n\r\n    if (!address.length) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        '@deprecated Use static method WalletAccount.connect or WalletAccount.connectSilent instead. Constructor {@link WalletAccount.(format:2)}.'\r\n      );\r\n      requestAccounts(this.walletProvider).then(([accountAddress]) => {\r\n        this.address = accountAddress.toLowerCase();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send transaction to the wallet.\r\n   * @param params Ethereum transaction object.\r\n   * @returns Transaction hash.\r\n   */\r\n  public sendTransactionRosettanet(params: TX_REQUEST) {\r\n    return sendTransaction(this.walletProvider, params);\r\n  }\r\n\r\n  /**\r\n   * Request the current chain ID from the wallet.\r\n   * @returns The current Wallet Chain ID.\r\n   */\r\n  public chainIdRosettanet() {\r\n    return requestChainId(this.walletProvider);\r\n  }\r\n\r\n  /**\r\n   * Sign typed data using the wallet. Uses personal_sign method.\r\n   * @param message The typed data to sign.\r\n   * @param address The wallet address to sign.\r\n   * @returns Signatures as strings.\r\n   */\r\n  public personalSignRosettanet(message: string, address: string) {\r\n    return personalSign(this.walletProvider, message, address);\r\n  }\r\n\r\n  /**\r\n   * Request connected accounts\r\n   * @returns connected accounts addresses\r\n   */\r\n  public accountsRosettanet() {\r\n    return accounts(this.walletProvider);\r\n  }\r\n\r\n  /**\r\n   * Request latest block number in Starknet\r\n   * @returns latest block number in hexadecimal format\r\n   */\r\n  public blockNumberRosettanet() {\r\n    return getBlockNumber(this.walletProvider);\r\n  }\r\n\r\n  /**\r\n   * Call request.\r\n   * @param tx Ethereum transaction object.\r\n   * @returns Answer from called contract.\r\n   */\r\n  public callRosettanet(tx: TX_REQUEST) {\r\n    return call(this.walletProvider, tx);\r\n  }\r\n\r\n  /**\r\n   * Estimated gas fee for the transaction.\r\n   * @param tx Ethereum transaction object.\r\n   * @returns Estimated gas amount.\r\n   */\r\n  public estimateGasRosettanet(tx: TX_REQUEST) {\r\n    return estimateGas(this.walletProvider, tx);\r\n  }\r\n\r\n  /**\r\n   * Latest gas price in network.\r\n   * @returns Latest gas price.\r\n   */\r\n  public gasPriceRosettanet() {\r\n    return gasPrice(this.walletProvider);\r\n  }\r\n\r\n  /**\r\n   * STRK balance of given address.\r\n   * @param address Address to check balance.\r\n   * @param block Block number or hash. (optional)\r\n   * @returns STRK balance.\r\n   */\r\n  public getBalanceRosettanet(\r\n    address: string,\r\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n  ) {\r\n    return getBalance(this.walletProvider, address, block);\r\n  }\r\n\r\n  /**\r\n   * Block by given block hash.\r\n   * @param blockHash Block hash.\r\n   * @param hydratedTx Hydrated transactions (optional)\r\n   * @returns Block by given block hash.\r\n   */\r\n  public getBlockByHashRosettanet(blockHash: BLOCK_HASH, hydratedTx: boolean = false) {\r\n    return getBlockByHash(this.walletProvider, blockHash, hydratedTx);\r\n  }\r\n\r\n  /**\r\n   * Block by given block number.\r\n   * @param blockNumber Block number or block tag.\r\n   * @param hydratedTx Hydrated transactions (optional)\r\n   * @returns Block by given block number.\r\n   */\r\n  public getBlockByNumberRosettanet(\r\n    blockNumber: BLOCK_NUMBER | BLOCK_TAG,\r\n    hydratedTx: boolean = false\r\n  ) {\r\n    return getBlockByNumber(this.walletProvider, blockNumber, hydratedTx);\r\n  }\r\n\r\n  /**\r\n   * Transaction count of given block hash.\r\n   * @param blockHash Block hash.\r\n   * @returns Transaction count of given block hash.\r\n   */\r\n  public getBlockTransactionCountByHashRosettanet(blockHash: BLOCK_HASH) {\r\n    return getBlockTransactionCountByHash(this.walletProvider, blockHash);\r\n  }\r\n\r\n  /**\r\n   * Transaction count of given block number.\r\n   * @param blockNumber Block number or block tag..\r\n   * @returns Transaction count of given block number.\r\n   */\r\n  public getBlockTransactionCountByNumberRosettanet(blockNumber: BLOCK_NUMBER | BLOCK_TAG) {\r\n    return getBlockTransactionCountByNumber(this.walletProvider, blockNumber);\r\n  }\r\n\r\n  public getCodeRosettanet(\r\n    address: string,\r\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n  ) {\r\n    return getCode(this.walletProvider, address, block);\r\n  }\r\n\r\n  public getTransactionHashByBlockHashAndIndexRosettanet(blockHash: BLOCK_HASH, index: string) {\r\n    return getTransactionHashByBlockHashAndIndex(this.walletProvider, blockHash, index);\r\n  }\r\n\r\n  public getTransactionHashByBlockNumberAndIndexRosettanet(\r\n    blockNumber: BLOCK_NUMBER | BLOCK_TAG,\r\n    index: string\r\n  ) {\r\n    return getTransactionHashByBlockNumberAndIndex(this.walletProvider, blockNumber, index);\r\n  }\r\n\r\n  public getTransactionByHashRosettanet(txHash: TXN_HASH) {\r\n    return getTransactionByHash(this.walletProvider, txHash);\r\n  }\r\n\r\n  /**\r\n   * Transaction count of given address.\r\n   * @param address address.\r\n   * @returns Transaction count of given address.\r\n   */\r\n  public getTransactionCountRosettanet(\r\n    address: string,\r\n    block: BLOCK_HASH | BLOCK_NUMBER | BLOCK_TAG = 'latest'\r\n  ) {\r\n    return getTransactionCount(this.walletProvider, address, block);\r\n  }\r\n\r\n  /**\r\n   * Transaction receipt of given transaction hash.\r\n   * @param txHash address.\r\n   * @returns Transaction receipt of given transaction hash.\r\n   */\r\n  public getTransactionReceiptRosettanet(txHash: TXN_HASH) {\r\n    return getTransactionReceipt(this.walletProvider, txHash);\r\n  }\r\n\r\n  // WALLET ACCOUNT METHODS\r\n\r\n  public requestAccounts() {\r\n    return requestAccounts(this.walletProvider);\r\n  }\r\n\r\n  /**\r\n   * Request Permission for wallet account\r\n   * @returns allowed accounts addresses\r\n   */\r\n  public getPermissions() {\r\n    if (this.walletProvider.name === 'Coinbase Wallet') {\r\n      throw new Error('Get permissions Method not found in Coinbase Wallet');\r\n    }\r\n    return getPermissions(this.walletProvider);\r\n  }\r\n\r\n  public switchStarknetChain(chainId: RosettanetChainId) {\r\n    return switchRosettanetChain(this.walletProvider, chainId);\r\n  }\r\n\r\n  /**\r\n   * Request adding ERC20 Token to Wallet List\r\n   * @param asset WatchAssetParameters\r\n   * @returns boolean\r\n   */\r\n  public watchAsset(asset: WatchAssetParameters) {\r\n    return watchAsset(this.walletProvider, asset);\r\n  }\r\n\r\n  override declare(): Promise<{ transaction_hash: string; class_hash: string }> {\r\n    throw new Error('Declare Method not implemented in Rosettanet Account Class.');\r\n  }\r\n\r\n  override deploy(): Promise<{ transaction_hash: string; contract_address: string[] }> {\r\n    throw new Error('Deploy Method not implemented in Rosettanet Account Class.');\r\n  }\r\n\r\n  /**\r\n   * Sign typed data using the wallet. Uses eth_signTypedData_v4 method.\r\n   * @param message The typed data to sign.\r\n   * @returns Signature as strings.\r\n   */\r\n  override async signMessage(message: TypedData) {\r\n    const evmSignedHash = await signMessage(this.walletProvider, message, this.address);\r\n\r\n    if (!evmSignedHash || (evmSignedHash.length !== 132 && evmSignedHash.length !== 130)) {\r\n      throw new Error('Ethereum Signature error');\r\n    }\r\n\r\n    const signedHashWithoutPrefix = encode.removeHexPrefix(evmSignedHash);\r\n    const r: Uint256 = cairo.uint256(encode.addHexPrefix(signedHashWithoutPrefix.slice(0, 63))); // First 64 chars → r (32 bytes)\r\n    const s: Uint256 = cairo.uint256(encode.addHexPrefix(signedHashWithoutPrefix.slice(64, 127))); // Next 64 chars → s (32 bytes)\r\n    const v = encode.addHexPrefix(signedHashWithoutPrefix.slice(128, 130)); // Last 2 chars → v (1 byte)\r\n\r\n    if (v !== '0x1c' && v !== '0x1b') {\r\n      throw new Error('Invalid Ethereum Signature');\r\n    }\r\n\r\n    return [\r\n      num.toHex(r.low),\r\n      num.toHex(r.high),\r\n      num.toHex(s.low),\r\n      num.toHex(s.high),\r\n      num.toHex(v),\r\n    ] as ArraySignatureType;\r\n  }\r\n\r\n  override async execute(calls: AllowArray<Call>): Promise<{ transaction_hash: string }> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const txCalls = [].concat(calls as any).map((it) => {\r\n      const { contractAddress, entrypoint, calldata } = it;\r\n      return {\r\n        contract_address: contractAddress,\r\n        entry_point: entrypoint,\r\n        calldata,\r\n      };\r\n    });\r\n\r\n    const params = {\r\n      calls: txCalls,\r\n    };\r\n\r\n    const txData = prepareMulticallCalldata(params.calls);\r\n\r\n    const txObject = {\r\n      from: this.address,\r\n      to: this.address,\r\n      data: txData,\r\n      value: '0x0',\r\n    };\r\n\r\n    const txHash = await sendTransaction(this.walletProvider, txObject);\r\n    return { transaction_hash: txHash };\r\n  }\r\n\r\n  static async connect(\r\n    provider: ProviderInterface,\r\n    walletProvider: EthereumWindowObject,\r\n    cairoVersion?: CairoVersion\r\n  ) {\r\n    const [accountAddress] = await requestAccounts(walletProvider);\r\n    return new RosettanetAccount(provider, walletProvider, cairoVersion, accountAddress);\r\n  }\r\n\r\n  static async connectSilent(\r\n    provider: ProviderInterface,\r\n    walletProvider: EthereumWindowObject,\r\n    cairoVersion?: CairoVersion\r\n  ) {\r\n    const [accountAddress] = await requestAccounts(walletProvider);\r\n    return new RosettanetAccount(provider, walletProvider, cairoVersion, accountAddress);\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}